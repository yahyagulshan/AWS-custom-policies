import boto3
import json
import csv
import io
from datetime import datetime

def lambda_handler(event, context):
    s3_client = boto3.client('s3')
    rds_client = boto3.client('rds')
    ec2_client = boto3.client('ec2')
    bucket_name = 'rds-status-check'
    
    # Report 1: RDS Instances
    rds_instances = rds_client.describe_db_instances()
    rds_report = io.StringIO()
    rds_writer = csv.writer(rds_report)
    rds_writer.writerow(['DBInstanceIdentifier', 'DBInstanceClass', 'Engine', 'DBInstanceStatus', 'Endpoint', 'AllocatedStorage', 'InstanceCreateTime'])
    
    for db_instance in rds_instances['DBInstances']:
        rds_writer.writerow([
            db_instance['DBInstanceIdentifier'],
            db_instance['DBInstanceClass'],
            db_instance['Engine'],
            db_instance['DBInstanceStatus'],
            db_instance['Endpoint']['Address'] if 'Endpoint' in db_instance else 'N/A',
            db_instance['AllocatedStorage'],
            db_instance['InstanceCreateTime']
        ])
    
    rds_report.seek(0)
    s3_client.put_object(Body=rds_report.getvalue(), Bucket=bucket_name, Key=f'reports/rds_report_{datetime.now().strftime("%Y-%m-%d")}.csv')
    
    # Report 2: EC2 Instances and OS Versions
    ec2_instances = ec2_client.describe_instances()
    os_report = io.StringIO()
    os_writer = csv.writer(os_report)
    os_writer.writerow(['InstanceId', 'InstanceType', 'LaunchTime', 'PlatformDetails', 'Architecture', 'State'])
    
    for reservation in ec2_instances['Reservations']:
        for instance in reservation['Instances']:
            os_writer.writerow([
                instance['InstanceId'],
                instance['InstanceType'],
                instance['LaunchTime'],
                instance.get('PlatformDetails', 'N/A'),
                instance.get('Architecture', 'N/A'),
                instance['State']['Name']
            ])
    
    os_report.seek(0)
    s3_client.put_object(Body=os_report.getvalue(), Bucket=bucket_name, Key=f'reports/os_report_{datetime.now().strftime("%Y-%m-%d")}.csv')
    
    return {
        'statusCode': 200,
        'body': json.dumps('Reports generated and uploaded successfully')
    }
